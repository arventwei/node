/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.mqtt.network.MsgPullAutoControl', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullBindUser', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullHistory', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullMode', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullSpeed', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullSwich', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullTime', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullUpdate', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullVersion', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPullWeather', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushAutoControl', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushCity', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushDeviceTime', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushMode', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushSensorData', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushSpeed', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushStatus', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushSwitch', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushTimeOnOff', null, global);
goog.exportSymbol('proto.com.mqtt.network.MsgPushVersion', null, global);
goog.exportSymbol('proto.com.mqtt.network.Opcode', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushStatus.displayName = 'proto.com.mqtt.network.MsgPushStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushStatus}
 */
proto.com.mqtt.network.MsgPushStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushStatus;
  return proto.com.mqtt.network.MsgPushStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushStatus}
 */
proto.com.mqtt.network.MsgPushStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.mqtt.network.MsgPushStatus.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.mqtt.network.MsgPushStatus.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushSensorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushSensorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushSensorData.displayName = 'proto.com.mqtt.network.MsgPushSensorData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushSensorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushSensorData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSensorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    temp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    humi: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pm25: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tvoc: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    heho: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    co2: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushSensorData}
 */
proto.com.mqtt.network.MsgPushSensorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushSensorData;
  return proto.com.mqtt.network.MsgPushSensorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushSensorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushSensorData}
 */
proto.com.mqtt.network.MsgPushSensorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHumi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPm25(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTvoc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeho(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCo2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushSensorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushSensorData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushSensorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHumi();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPm25();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTvoc();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getHeho();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCo2();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 temp = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setTemp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 humi = 2;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getHumi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setHumi = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 pm25 = 3;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getPm25 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setPm25 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float tvoc = 4;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getTvoc = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setTvoc = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float heho = 5;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getHeho = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setHeho = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 co2 = 6;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSensorData.prototype.getCo2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSensorData.prototype.setCo2 = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushSwitch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushSwitch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushSwitch.displayName = 'proto.com.mqtt.network.MsgPushSwitch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSwitch.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushSwitch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushSwitch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSwitch.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushSwitch}
 */
proto.com.mqtt.network.MsgPushSwitch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushSwitch;
  return proto.com.mqtt.network.MsgPushSwitch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushSwitch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushSwitch}
 */
proto.com.mqtt.network.MsgPushSwitch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushSwitch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushSwitch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushSwitch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushSwitch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.mqtt.network.MsgPushSwitch.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.mqtt.network.MsgPushSwitch.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushSpeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushSpeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushSpeed.displayName = 'proto.com.mqtt.network.MsgPushSpeed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSpeed.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushSpeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushSpeed} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushSpeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushSpeed}
 */
proto.com.mqtt.network.MsgPushSpeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushSpeed;
  return proto.com.mqtt.network.MsgPushSpeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushSpeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushSpeed}
 */
proto.com.mqtt.network.MsgPushSpeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushSpeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushSpeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushSpeed} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushSpeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushSpeed.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushSpeed.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushMode.displayName = 'proto.com.mqtt.network.MsgPushMode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushMode.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushMode} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushMode}
 */
proto.com.mqtt.network.MsgPushMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushMode;
  return proto.com.mqtt.network.MsgPushMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushMode}
 */
proto.com.mqtt.network.MsgPushMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushMode} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushMode.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushMode.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushVersion.displayName = 'proto.com.mqtt.network.MsgPushVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushVersion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    driverVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reservedVersion: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushVersion}
 */
proto.com.mqtt.network.MsgPushVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushVersion;
  return proto.com.mqtt.network.MsgPushVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushVersion}
 */
proto.com.mqtt.network.MsgPushVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservedVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushVersion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDriverVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReservedVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string firm_version = 1;
 * @return {string}
 */
proto.com.mqtt.network.MsgPushVersion.prototype.getFirmVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPushVersion.prototype.setFirmVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string driver_version = 2;
 * @return {string}
 */
proto.com.mqtt.network.MsgPushVersion.prototype.getDriverVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPushVersion.prototype.setDriverVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string reserved_version = 3;
 * @return {string}
 */
proto.com.mqtt.network.MsgPushVersion.prototype.getReservedVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPushVersion.prototype.setReservedVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushDeviceTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushDeviceTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushDeviceTime.displayName = 'proto.com.mqtt.network.MsgPushDeviceTime';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushDeviceTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushDeviceTime} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushDeviceTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    runTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    workTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushDeviceTime}
 */
proto.com.mqtt.network.MsgPushDeviceTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushDeviceTime;
  return proto.com.mqtt.network.MsgPushDeviceTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushDeviceTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushDeviceTime}
 */
proto.com.mqtt.network.MsgPushDeviceTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRunTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushDeviceTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushDeviceTime} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushDeviceTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWorkTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 run_time = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.getRunTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.setRunTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 work_time = 2;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.getWorkTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushDeviceTime.prototype.setWorkTime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushCity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushCity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushCity.displayName = 'proto.com.mqtt.network.MsgPushCity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushCity.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushCity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushCity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushCity.toObject = function(includeInstance, msg) {
  var f, obj = {
    cityId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushCity}
 */
proto.com.mqtt.network.MsgPushCity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushCity;
  return proto.com.mqtt.network.MsgPushCity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushCity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushCity}
 */
proto.com.mqtt.network.MsgPushCity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushCity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushCity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushCity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushCity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCityId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 city_id = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushCity.prototype.getCityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushCity.prototype.setCityId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushTimeOnOff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushTimeOnOff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushTimeOnOff.displayName = 'proto.com.mqtt.network.MsgPushTimeOnOff';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushTimeOnOff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushTimeOnOff} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushTimeOnOff}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushTimeOnOff;
  return proto.com.mqtt.network.MsgPushTimeOnOff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushTimeOnOff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushTimeOnOff}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushTimeOnOff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushTimeOnOff} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushTimeOnOff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushTimeOnOff.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushTimeOnOff.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPushAutoControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPushAutoControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPushAutoControl.displayName = 'proto.com.mqtt.network.MsgPushAutoControl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushAutoControl.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPushAutoControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPushAutoControl} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPushAutoControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPushAutoControl}
 */
proto.com.mqtt.network.MsgPushAutoControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPushAutoControl;
  return proto.com.mqtt.network.MsgPushAutoControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPushAutoControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPushAutoControl}
 */
proto.com.mqtt.network.MsgPushAutoControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPushAutoControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPushAutoControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPushAutoControl} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPushAutoControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPushAutoControl.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPushAutoControl.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullVersion.displayName = 'proto.com.mqtt.network.MsgPullVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullVersion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firmUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firmMd5: jspb.Message.getFieldWithDefault(msg, 3, ""),
    driverVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    driverUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    driverMd5: jspb.Message.getFieldWithDefault(msg, 6, ""),
    deviceType: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullVersion}
 */
proto.com.mqtt.network.MsgPullVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullVersion;
  return proto.com.mqtt.network.MsgPullVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullVersion}
 */
proto.com.mqtt.network.MsgPullVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmMd5(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverMd5(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullVersion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirmUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirmMd5();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDriverVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDriverUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDriverMd5();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDeviceType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string firm_version = 1;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getFirmVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setFirmVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string firm_url = 2;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getFirmUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setFirmUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string firm_md5 = 3;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getFirmMd5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setFirmMd5 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string driver_version = 4;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getDriverVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setDriverVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string driver_url = 5;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getDriverUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setDriverUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string driver_md5 = 6;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getDriverMd5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setDriverMd5 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string device_type = 7;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullVersion.prototype.getDeviceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullVersion.prototype.setDeviceType = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullTime.displayName = 'proto.com.mqtt.network.MsgPullTime';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullTime.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullTime} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    unixTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    year: jspb.Message.getFieldWithDefault(msg, 2, 0),
    month: jspb.Message.getFieldWithDefault(msg, 3, 0),
    day: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hour: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    second: jspb.Message.getFieldWithDefault(msg, 7, 0),
    weak: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullTime}
 */
proto.com.mqtt.network.MsgPullTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullTime;
  return proto.com.mqtt.network.MsgPullTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullTime}
 */
proto.com.mqtt.network.MsgPullTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnixTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHour(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecond(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeak(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullTime} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnixTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHour();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWeak();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 unix_time = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getUnixTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setUnixTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 year = 2;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setYear = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 month = 3;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setMonth = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 day = 4;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setDay = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 hour = 5;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setHour = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 minute = 6;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setMinute = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 second = 7;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setSecond = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 weak = 8;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullTime.prototype.getWeak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullTime.prototype.setWeak = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullUpdate.displayName = 'proto.com.mqtt.network.MsgPullUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firmUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firmMd5: jspb.Message.getFieldWithDefault(msg, 3, ""),
    driverVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    driverUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    driverMd5: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullUpdate}
 */
proto.com.mqtt.network.MsgPullUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullUpdate;
  return proto.com.mqtt.network.MsgPullUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullUpdate}
 */
proto.com.mqtt.network.MsgPullUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmMd5(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverMd5(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirmUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirmMd5();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDriverVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDriverUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDriverMd5();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string firm_version = 1;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getFirmVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setFirmVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string firm_url = 2;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getFirmUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setFirmUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string firm_md5 = 3;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getFirmMd5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setFirmMd5 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string driver_version = 4;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getDriverVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setDriverVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string driver_url = 5;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getDriverUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setDriverUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string driver_md5 = 6;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullUpdate.prototype.getDriverMd5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullUpdate.prototype.setDriverMd5 = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullWeather = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullWeather, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullWeather.displayName = 'proto.com.mqtt.network.MsgPullWeather';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullWeather.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullWeather} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullWeather.toObject = function(includeInstance, msg) {
  var f, obj = {
    temp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    humi: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pm25: jspb.Message.getFieldWithDefault(msg, 3, 0),
    aqi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    co: jspb.Message.getFieldWithDefault(msg, 5, 0),
    no2: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pm10: jspb.Message.getFieldWithDefault(msg, 7, 0),
    so2: jspb.Message.getFieldWithDefault(msg, 8, 0),
    o3: jspb.Message.getFieldWithDefault(msg, 9, 0),
    weather: jspb.Message.getFieldWithDefault(msg, 10, ""),
    tempRange: jspb.Message.getFieldWithDefault(msg, 11, ""),
    windDir: jspb.Message.getFieldWithDefault(msg, 12, ""),
    windPower: jspb.Message.getFieldWithDefault(msg, 13, ""),
    pubUnixTime: jspb.Message.getFieldWithDefault(msg, 14, 0),
    cityName: jspb.Message.getFieldWithDefault(msg, 15, ""),
    cityId: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullWeather}
 */
proto.com.mqtt.network.MsgPullWeather.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullWeather;
  return proto.com.mqtt.network.MsgPullWeather.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullWeather} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullWeather}
 */
proto.com.mqtt.network.MsgPullWeather.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHumi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPm25(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAqi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNo2(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPm10(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSo2(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setO3(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeather(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTempRange(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindDir(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindPower(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPubUnixTime(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCityName(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullWeather.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullWeather} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullWeather.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHumi();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPm25();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAqi();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCo();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getNo2();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPm10();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSo2();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getO3();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getWeather();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTempRange();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getWindDir();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getWindPower();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPubUnixTime();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCityName();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCityId();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional int32 temp = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setTemp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 humi = 2;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getHumi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setHumi = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 pm25 = 3;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getPm25 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setPm25 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 aqi = 4;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getAqi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setAqi = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 co = 5;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getCo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setCo = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 no2 = 6;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getNo2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setNo2 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 pm10 = 7;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getPm10 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setPm10 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 so2 = 8;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getSo2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setSo2 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 o3 = 9;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getO3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setO3 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string weather = 10;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getWeather = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setWeather = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string temp_range = 11;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getTempRange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setTempRange = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string wind_dir = 12;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getWindDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setWindDir = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string wind_power = 13;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getWindPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setWindPower = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 pub_unix_time = 14;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getPubUnixTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setPubUnixTime = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string city_name = 15;
 * @return {string}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getCityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setCityName = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 city_id = 16;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullWeather.prototype.getCityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullWeather.prototype.setCityId = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullBindUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullBindUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullBindUser.displayName = 'proto.com.mqtt.network.MsgPullBindUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullBindUser.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullBindUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullBindUser} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullBindUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullBindUser}
 */
proto.com.mqtt.network.MsgPullBindUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullBindUser;
  return proto.com.mqtt.network.MsgPullBindUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullBindUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullBindUser}
 */
proto.com.mqtt.network.MsgPullBindUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullBindUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullBindUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullBindUser} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullBindUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullBindUser.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullBindUser.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullHistory.displayName = 'proto.com.mqtt.network.MsgPullHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullHistory}
 */
proto.com.mqtt.network.MsgPullHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullHistory;
  return proto.com.mqtt.network.MsgPullHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullHistory}
 */
proto.com.mqtt.network.MsgPullHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullHistory.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullHistory.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullSwich = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullSwich, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullSwich.displayName = 'proto.com.mqtt.network.MsgPullSwich';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullSwich.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullSwich.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullSwich} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullSwich.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullSwich}
 */
proto.com.mqtt.network.MsgPullSwich.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullSwich;
  return proto.com.mqtt.network.MsgPullSwich.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullSwich} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullSwich}
 */
proto.com.mqtt.network.MsgPullSwich.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullSwich.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullSwich.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullSwich} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullSwich.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.mqtt.network.MsgPullSwich.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.mqtt.network.MsgPullSwich.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullSpeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullSpeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullSpeed.displayName = 'proto.com.mqtt.network.MsgPullSpeed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullSpeed.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullSpeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullSpeed} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullSpeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullSpeed}
 */
proto.com.mqtt.network.MsgPullSpeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullSpeed;
  return proto.com.mqtt.network.MsgPullSpeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullSpeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullSpeed}
 */
proto.com.mqtt.network.MsgPullSpeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullSpeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullSpeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullSpeed} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullSpeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullSpeed.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullSpeed.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullMode.displayName = 'proto.com.mqtt.network.MsgPullMode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullMode.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullMode} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullMode}
 */
proto.com.mqtt.network.MsgPullMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullMode;
  return proto.com.mqtt.network.MsgPullMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullMode}
 */
proto.com.mqtt.network.MsgPullMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullMode} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullMode.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullMode.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mqtt.network.MsgPullAutoControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mqtt.network.MsgPullAutoControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.mqtt.network.MsgPullAutoControl.displayName = 'proto.com.mqtt.network.MsgPullAutoControl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullAutoControl.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mqtt.network.MsgPullAutoControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mqtt.network.MsgPullAutoControl} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.mqtt.network.MsgPullAutoControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mqtt.network.MsgPullAutoControl}
 */
proto.com.mqtt.network.MsgPullAutoControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mqtt.network.MsgPullAutoControl;
  return proto.com.mqtt.network.MsgPullAutoControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mqtt.network.MsgPullAutoControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mqtt.network.MsgPullAutoControl}
 */
proto.com.mqtt.network.MsgPullAutoControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mqtt.network.MsgPullAutoControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mqtt.network.MsgPullAutoControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mqtt.network.MsgPullAutoControl} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.mqtt.network.MsgPullAutoControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 state = 1;
 * @return {number}
 */
proto.com.mqtt.network.MsgPullAutoControl.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.mqtt.network.MsgPullAutoControl.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.com.mqtt.network.Opcode = {
  OPCODE_BEGIN: 0,
  PUSHSTATUS: 1,
  PUSHSENSORDATA: 2,
  PUSHSWITCH: 3,
  PUSHSPEED: 4,
  PUSHMODE: 5,
  PUSHVERSION: 6,
  PUSHDEVICETIME: 7,
  PUSHCITY: 8,
  PUSHTIMEONOFF: 9,
  PUSHAUTOCONTROL: 10,
  GETTIME: 11,
  GETVERSION: 12,
  GETWEATHER: 13,
  GETBINDUSER: 14,
  GETHISTORY: 15,
  PULLVERSION: 16,
  PULLTIME: 17,
  PULLUPDATE: 18,
  PULLWEATHER: 19,
  PULLBINDUSER: 20,
  PULLHISTORY: 21,
  PULLSWITCH: 22,
  PULLSPEED: 23,
  PULLMODE: 24,
  PULLAUTOCONTROL: 25
};

goog.object.extend(exports, proto.com.mqtt.network);
